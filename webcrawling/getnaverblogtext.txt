def get_naver_blog_text_v4(url):
    
    def get_compiled_text_from_soup(soup, tag):
        contents = []
        contentsArea = soup.select(tag)
        if contentsArea:
            # real url의 div#postViewArea로부터 콘텐츠 텍스트 불러오기
            for content in contentsArea:
                # html 태그를 제거한 뒤 텍스트만 contents 리스트에 저장
                contents = [str(content.get_text()) for content in soup.select(tag)]
                
        return contents

        # 리스트 안의 문자열을 모두 합쳐서 반환하고 함수 종료
        # 문자열 없었다면 empty string 반환하고 함수 종료
        return ' '.join(contents)
    
    def create_soup_from_url(url):
        get_blog_post_content_code = requests.get(url)
        get_blog_post_content_text = get_blog_post_content_code.text
        return BeautifulSoup(get_blog_post_content_text, 'lxml')
        
    real_blog_post_url = ''
    contents = []
    fake_url = str(url)
    
    # 주소값 체크 - string으로 바꾼 값이 nan이면 None 반환
    if fake_url == 'nan':
        print('nan', end=' ')
        return None

    try:
        # fake url로부터 BeautifulSoup 생성
        #time.sleep(sleep_time)
        get_blog_post_content_soup = create_soup_from_url(fake_url)

        # fake url의 mainFrame 속성값으로부터 real url 생성
        real_blog_post_url = "http://blog.naver.com" + get_blog_post_content_soup.select('#mainFrame')[0].get('src')

        # real url로부터 BeautifulSoup 생성            
        get_real_blog_post_content_soup = create_soup_from_url(real_blog_post_url)            
        contents = get_compiled_text_from_soup(get_real_blog_post_content_soup,
                                              'div#postViewArea')

        if contents:
            print('/', end=' ')
            return contents
        else:
            raise IndexError

    except:           
        try:
            # 만약 위에서 함수가 종료되지 않았다면 hidden tag값을 생성
            uid = real_blog_post_url.split('logNo=')[1].split('&amp')[0].split('&redirect')[0]
            hidden_tag = 'div#post-view' + uid
            contents = get_compiled_text_from_soup(get_real_blog_post_content_soup, hidden_tag)

            # 만약 contents 리스트에 뭔가 담겨 있다면
            if contents:
                # 리스트 안의 문자열을 모두 합쳐서 반환하고 함수 종료
                print('/', end=' ')
                return contents
            else:
                raise IndexError

        except:
          	# 네이버 책 페이지 내부로 옮겨진 블로그 리뷰
            old_post_tag = 'div.rvw_cnt'
            old_soup = create_soup_from_url(fake_url)
            contents = get_compiled_text_from_soup(old_soup, old_post_tag)

            if contents:
                print('/', end=' ')
                return contents

            else:
                print('*', end=' ')
                return None